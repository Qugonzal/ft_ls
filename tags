!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CC	Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -Wextra -Werror$/;"	m
CLEAN_COLOR	Makefile	/^CLEAN_COLOR = \\033[1;36m$/;"	m
FT_LS_H	ft_ls.h	/^# define FT_LS_H$/;"	d
INC	Makefile	/^INC = -Llibft .\/libft\/libft.a$/;"	m
LIBFT_H	libft/libft.h	/^# define LIBFT_H$/;"	d
LS_1	ft_ls.h	/^# define LS_1	/;"	d
LS_A	ft_ls.h	/^# define LS_A	/;"	d
LS_L	ft_ls.h	/^# define LS_L	/;"	d
LS_R	ft_ls.h	/^# define LS_R	/;"	d
LS_REC	ft_ls.h	/^# define LS_REC	/;"	d
LS_T	ft_ls.h	/^# define LS_T	/;"	d
NAME	Makefile	/^NAME = ft_ls$/;"	m
NAME	libft/Makefile	/^NAME = libft.a$/;"	m
NO_COLOR	Makefile	/^NO_COLOR = \\033[0m$/;"	m
OBJ	Makefile	/^OBJ = $(SRC:.c=.o)$/;"	m
OBJ	libft/Makefile	/^OBJ = $(SRC:.c=.o)$/;"	m
OK_COLOR	Makefile	/^OK_COLOR = \\033[1;32m$/;"	m
SRC	Makefile	/^SRC = main.c $(addprefix ft_, $(addsuffix .c, \\$/;"	m
SRC	libft/Makefile	/^SRC =  $(addprefix ft_, $(addsuffix .c, \\$/;"	m
WAIT_COLOR	Makefile	/^WAIT_COLOR = \\033[1;33m$/;"	m
attr	ft_ls.h	/^	struct s_stat	*attr;$/;"	m	struct:s_file	typeref:struct:s_file::s_stat
blocks	ft_ls.h	/^	blkcnt_t		blocks;$/;"	m	struct:s_max
blocks	ft_ls.h	/^	blkcnt_t		blocks;$/;"	m	struct:s_stat
content	libft/libft.h	/^	void			*content;$/;"	m	struct:s_list
content_size	libft/libft.h	/^	size_t			content_size;$/;"	m	struct:s_list
conv	libft/ft_itoa.c	/^static void		conv(char *s, int c, int i)$/;"	f	file:
dirstream	ft_ls.h	/^	DIR				*dirstream;$/;"	m	struct:s_file
ft_arg_lst	main.c	/^void	ft_arg_lst(t_file *arg_lst, int options, int identifier)$/;"	f
ft_ascii	ft_ascii_arg.c	/^t_file		*ft_ascii(t_file *first)$/;"	f
ft_atoi	libft/ft_atoi.c	/^int	ft_atoi(const char *str)$/;"	f
ft_atoli	libft/ft_atoli.c	/^long	ft_atoli(const char *str)$/;"	f
ft_bzero	libft/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_check_open	ft_error.c	/^int		ft_check_open(t_file *dir, char *path)$/;"	f
ft_checkmax	ft_max.c	/^void		ft_checkmax(t_stat *file, t_max *max)$/;"	f
ft_chk_dir	ft_print.c	/^t_file		*ft_chk_dir(t_file *file, t_file **dire, int options)$/;"	f
ft_chknopath	ft_error.c	/^int		ft_chknopath(t_file *dir)$/;"	f
ft_clean_slash	ft_path.c	/^void	ft_clean_slash(char *path)$/;"	f
ft_cut_time	ft_time.c	/^void		ft_cut_time(char *str, time_t mtime)$/;"	f
ft_error	ft_error.c	/^void	ft_error(void)$/;"	f
ft_fillcheck_stat	ft_stat.c	/^void		ft_fillcheck_stat(t_file *file, t_max *max, char *path)$/;"	f
ft_fillstat	ft_stat.c	/^void		ft_fillstat(t_stat *file, struct stat *sb)$/;"	f
ft_fillstat_ug	ft_stat.c	/^void		ft_fillstat_ug(t_stat *file, struct stat *sb)$/;"	f
ft_free	ft_link_arg_lst.c	/^void		ft_free(t_file *file)$/;"	f
ft_fts_open	main.c	/^int		ft_fts_open(char **av)$/;"	f
ft_hard_option	ft_set_options.c	/^int					ft_hard_option(char *av, int *options)$/;"	f
ft_iflink	ft_ls.c	/^int			ft_iflink(char *path)$/;"	f
ft_init_max	ft_max.c	/^void		ft_init_max(t_max *max)$/;"	f
ft_insert	ft_link_arg_lst.c	/^void		ft_insert(t_file *elem, t_file *dest, char option)$/;"	f
ft_inverse_list	ft_inverse.c	/^t_file	*ft_inverse_list(t_file *file)$/;"	f
ft_is_prime	libft/ft_is_prime.c	/^int		ft_is_prime(unsigned int nb)$/;"	f
ft_isalnum	libft/ft_isalnum.c	/^int		ft_isalnum(int c)$/;"	f
ft_isalpha	libft/ft_isalpha.c	/^int		ft_isalpha(int c)$/;"	f
ft_isascii	libft/ft_isascii.c	/^int		ft_isascii(int c)$/;"	f
ft_isdigit	libft/ft_isdigit.c	/^int		ft_isdigit(int c)$/;"	f
ft_isprint	libft/ft_isprint.c	/^int		ft_isprint(int c)$/;"	f
ft_itoa	libft/ft_itoa.c	/^char			*ft_itoa(int c)$/;"	f
ft_link_list	ft_link_arg_lst.c	/^void		ft_link_list(t_file *file)$/;"	f
ft_lister	main.c	/^void	ft_lister(int *i, int *identifier, char **av, t_file **arg_lst)$/;"	f
ft_ls	ft_ls.c	/^void		ft_ls(DIR *dir, int options, char *path)$/;"	f
ft_ls_all	ft_ls.c	/^t_file		*ft_ls_all(DIR *dir, char options)$/;"	f
ft_ls_l	ft_ls_l.c	/^t_file		*ft_ls_l(t_file *file, char *path, int options)$/;"	f
ft_lst_nodir	ft_unique_files.c	/^int		ft_lst_nodir(t_file **arg_lst, int options)$/;"	f
ft_lstadd	libft/ft_lstadd.c	/^void	ft_lstadd(t_list **alst, t_list *new)$/;"	f
ft_lstdel	libft/ft_lstdel.c	/^void	ft_lstdel(t_list **alst, void (*del)(void *, size_t))$/;"	f
ft_lstdelone	libft/ft_lstdelone.c	/^void	ft_lstdelone(t_list **alst, void (*del)(void *, size_t))$/;"	f
ft_lstiter	libft/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(t_list *elem))$/;"	f
ft_lstmap	libft/ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, t_list *(*f)(t_list *elem))$/;"	f
ft_lstnew	libft/ft_lstnew.c	/^t_list	*ft_lstnew(void const *content, size_t content_size)$/;"	f
ft_max_mode	ft_max.c	/^void		ft_max_mode(t_stat *file, t_max *max)$/;"	f
ft_memalloc	libft/ft_memalloc.c	/^void	*ft_memalloc(size_t size)$/;"	f
ft_memccpy	libft/ft_memccpy.c	/^void	*ft_memccpy(void *dst, const void *src, int c, size_t n)$/;"	f
ft_memchr	libft/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	libft/ft_memcmp.c	/^int		ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	libft/ft_memcpy.c	/^void	*ft_memcpy(void *dst, const void *src, size_t n)$/;"	f
ft_memdel	libft/ft_memdel.c	/^void	ft_memdel(void **ap)$/;"	f
ft_memmove	libft/ft_memmove.c	/^void	*ft_memmove(void *dst, const void *src, size_t len)$/;"	f
ft_memset	libft/ft_memset.c	/^void	*ft_memset(void *b, int c, size_t len)$/;"	f
ft_mtime	ft_time.c	/^t_file		*ft_mtime(t_file *list, char *path)$/;"	f
ft_mtimecopy	ft_time.c	/^t_file		*ft_mtimecopy(t_file *list, char *path)$/;"	f
ft_no_arg	main.c	/^void	ft_no_arg(t_file *arg_lst, int options)$/;"	f
ft_no_option	ft_set_options.c	/^void				ft_no_option(char chr)$/;"	f
ft_nodir	ft_unique_files.c	/^void	ft_nodir(int options, char *path)$/;"	f
ft_normal_option	ft_set_options.c	/^int					ft_normal_option(char *av, int *options)$/;"	f
ft_nostat	ft_error.c	/^int		ft_nostat(t_max *max, char *name)$/;"	f
ft_parse	ft_ascii_arg.c	/^t_file		*ft_parse(t_file *small, t_file *big)$/;"	f
ft_path	ft_path.c	/^char	*ft_path(char *path, char *name)$/;"	f
ft_place_first	ft_ascii_arg.c	/^t_file		*ft_place_first(t_file *elem)$/;"	f
ft_place_last	ft_ascii_arg.c	/^t_file		*ft_place_last(t_file *elem)$/;"	f
ft_place_young	ft_time.c	/^t_file		*ft_place_young(t_file *list)$/;"	f
ft_power	libft/ft_power.c	/^long	ft_power(long nb, int power)$/;"	f
ft_print_chk_dir	ft_print.c	/^t_file		*ft_print_chk_dir(t_file *file, char *path, int options)$/;"	f
ft_print_l	ft_print_2.c	/^int		ft_print_l(t_file *file, t_max *max, char *path)$/;"	f
ft_printspace	ft_print.c	/^void		ft_printspace(long long nb, long long max)$/;"	f
ft_printspace_str	ft_print.c	/^void		ft_printspace_str(char *file_name, int max_len)$/;"	f
ft_put_ls1	ft_unique_files.c	/^void	ft_put_ls1(int options, char *path)$/;"	f
ft_put_mode	ft_print_2.c	/^int		ft_put_mode(mode_t mode)$/;"	f
ft_put_name	ft_print_3.c	/^void	ft_put_name(t_file *file, int mode, char *path)$/;"	f
ft_put_owners	ft_print_3.c	/^void	ft_put_owners(t_file *file, t_max *max)$/;"	f
ft_put_right	ft_print_2.c	/^int		ft_put_right(mode_t mode)$/;"	f
ft_put_size_n_time	ft_time.c	/^void		ft_put_size_n_time(t_file *file, t_max *max, int mode, int check)$/;"	f
ft_put_total	ft_ls_l.c	/^void		ft_put_total(t_max max)$/;"	f
ft_put_ufile	ft_unique_files.c	/^void	ft_put_ufile(t_file **lst, t_file **list, int options)$/;"	f
ft_putchar	libft/ft_putchar.c	/^void	ft_putchar(char c)$/;"	f
ft_putchar_fd	libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl	libft/ft_putendl.c	/^void	ft_putendl(char const *s)$/;"	f
ft_putendl_fd	libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char const *s, int fd)$/;"	f
ft_putlongnbr	libft/ft_putlongnbr.c	/^void	ft_putlongnbr(long n)$/;"	f
ft_putnbr	libft/ft_putnbr.c	/^void			ft_putnbr(int n)$/;"	f
ft_putnbr_fd	libft/ft_putnbr_fd.c	/^void			ft_putnbr_fd(int n, int fd)$/;"	f
ft_putnbr_ll	ft_print_2.c	/^void	ft_putnbr_ll(long long n)$/;"	f
ft_putnbr_r	libft/ft_putnbr.c	/^static void		ft_putnbr_r(long n)$/;"	f	file:
ft_putnbr_rfd	libft/ft_putnbr_fd.c	/^static void		ft_putnbr_rfd(long n, int fd)$/;"	f	file:
ft_putnstr	libft/ft_putnstr.c	/^void	ft_putnstr(char const *s, size_t n)$/;"	f
ft_putpath	ft_path.c	/^void	ft_putpath(char *path)$/;"	f
ft_putstr	libft/ft_putstr.c	/^void	ft_putstr(char const *s)$/;"	f
ft_putstr_fd	libft/ft_putstr_fd.c	/^void	ft_putstr_fd(char const *s, int fd)$/;"	f
ft_recurse	ft_ls.c	/^t_file		*ft_recurse(t_file *file, char *path, int options)$/;"	f
ft_rewind_lst	ft_unique_files.c	/^void	ft_rewind_lst(t_file **list)$/;"	f
ft_set_options	ft_set_options.c	/^int					ft_set_options(char **av, int *nb)$/;"	f
ft_skip	ft_skip.c	/^t_file		*ft_skip(t_file *file)$/;"	f
ft_skip_current_t	ft_skip.c	/^t_file		*ft_skip_current_t(t_file *file)$/;"	f
ft_skipper	ft_skip.c	/^t_file		*ft_skipper(t_file *file)$/;"	f
ft_sqrt	libft/ft_sqrt.c	/^long	ft_sqrt(long nb)$/;"	f
ft_strcat	libft/ft_strcat.c	/^char	*ft_strcat(char *s1, const char *s2)$/;"	f
ft_strchr	libft/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strclr	libft/ft_strclr.c	/^void	ft_strclr(char *s)$/;"	f
ft_strcmp	libft/ft_strcmp.c	/^int		ft_strcmp(const char *s1, const char *s2)$/;"	f
ft_strcpy	libft/ft_strcpy.c	/^char	*ft_strcpy(char *dst, const char *src)$/;"	f
ft_strcut	libft/ft_strcut.c	/^char	*ft_strcut(int x, int flag, char *s)$/;"	f
ft_strdel	libft/ft_strdel.c	/^void	ft_strdel(char **as)$/;"	f
ft_strdup	libft/ft_strdup.c	/^char	*ft_strdup(const char *s1)$/;"	f
ft_strequ	libft/ft_strequ.c	/^int		ft_strequ(char const *s1, char const *s2)$/;"	f
ft_strfcat	ft_print_3.c	/^void	ft_strfcat(char *s1, char *s2)$/;"	f
ft_striter	libft/ft_striter.c	/^void	ft_striter(char *s, void (*f)(char *))$/;"	f
ft_striteri	libft/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char *))$/;"	f
ft_strjoin	libft/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strlcat	libft/ft_strlcat.c	/^size_t		ft_strlcat(char *dst, const char *src, size_t size)$/;"	f
ft_strlen	libft/ft_strlen.c	/^size_t		ft_strlen(const char *str)$/;"	f
ft_strmap	libft/ft_strmap.c	/^char	*ft_strmap(char const *s, char (*f)(char))$/;"	f
ft_strmapi	libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncat	libft/ft_strncat.c	/^char	*ft_strncat(char *s1, const char *s2, size_t n)$/;"	f
ft_strncmp	libft/ft_strncmp.c	/^int		ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strncpy	libft/ft_strncpy.c	/^char	*ft_strncpy(char *dst, const char *src, size_t len)$/;"	f
ft_strnequ	libft/ft_strnequ.c	/^int		ft_strnequ(char const *s1, char const *s2, size_t n)$/;"	f
ft_strnew	libft/ft_strnew.c	/^char	*ft_strnew(size_t size)$/;"	f
ft_strnjoin	libft/ft_strnjoin.c	/^char	*ft_strnjoin(char const *s1, char const *s2, size_t len)$/;"	f
ft_strnstr	libft/ft_strnstr.c	/^char	*ft_strnstr(const char *big, const char *little, size_t len)$/;"	f
ft_strrchr	libft/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f
ft_strsplit	libft/ft_strsplit.c	/^char			**ft_strsplit(char const *s, char c)$/;"	f
ft_strstr	libft/ft_strstr.c	/^char	*ft_strstr(const char *big, const char *little)$/;"	f
ft_strsub	libft/ft_strsub.c	/^char	*ft_strsub(char const *s, unsigned int start, size_t len)$/;"	f
ft_strtrim	libft/ft_strtrim.c	/^char	*ft_strtrim(char const *s)$/;"	f
ft_tolower	libft/ft_tolower.c	/^int		ft_tolower(int c)$/;"	f
ft_toupper	libft/ft_toupper.c	/^int		ft_toupper(int c)$/;"	f
ft_unlink	ft_link_arg_lst.c	/^void		ft_unlink(t_file *elem)$/;"	f
ft_xattr	ft_print_2.c	/^void		ft_xattr(t_file *file, char *path)$/;"	f
group	ft_ls.h	/^	char			*group;$/;"	m	struct:s_stat
group	ft_ls.h	/^	int				group;$/;"	m	struct:s_max
id	ft_ls.h	/^	int				id;$/;"	m	struct:s_file
main	Xfiles/opend.c	/^int main(int argc, char **argv)$/;"	f
main	Xfiles/openrdir.c	/^int		main(int argc, char **argv)$/;"	f
main	Xfiles/statmain.c	/^int		main(int argc, char *argv[])$/;"	f
main	main.c	/^int		main(int ac, char **av)$/;"	f
min	libft/ft_itoa.c	/^static int		min(char *s, int c)$/;"	f	file:
mode	ft_ls.h	/^	int				mode;$/;"	m	struct:s_file
mode	ft_ls.h	/^	mode_t			mode;$/;"	m	struct:s_max
mode	ft_ls.h	/^	mode_t			mode;$/;"	m	struct:s_stat
mtime	ft_ls.h	/^	time_t			mtime;$/;"	m	struct:s_max
mtime	ft_ls.h	/^	time_t			mtime;$/;"	m	struct:s_stat
name	ft_ls.h	/^	char			name[260];$/;"	m	struct:s_file
new_file	ft_link_arg_lst.c	/^t_file		*new_file(t_file *nxt, char *name)$/;"	f
next	ft_ls.h	/^	struct s_file	*next;$/;"	m	struct:s_file	typeref:struct:s_file::s_file
next	libft/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
nlink	ft_ls.h	/^	nlink_t			nlink;$/;"	m	struct:s_max
nlink	ft_ls.h	/^	nlink_t			nlink;$/;"	m	struct:s_stat
prev	ft_ls.h	/^	struct s_file	*prev;$/;"	m	struct:s_file	typeref:struct:s_file::s_file
s_file	ft_ls.h	/^typedef struct		s_file$/;"	s
s_list	libft/libft.h	/^typedef	struct		s_list$/;"	s
s_max	ft_ls.h	/^typedef struct		s_max$/;"	s
s_stat	ft_ls.h	/^typedef struct		s_stat$/;"	s
size	ft_ls.h	/^	off_t			size;$/;"	m	struct:s_max
size	ft_ls.h	/^	off_t			size;$/;"	m	struct:s_stat
t_file	ft_ls.h	/^}					t_file;$/;"	t	typeref:struct:s_file
t_list	libft/libft.h	/^}					t_list;$/;"	t	typeref:struct:s_list
t_max	ft_ls.h	/^}					t_max;$/;"	t	typeref:struct:s_max
t_stat	ft_ls.h	/^}					t_stat;$/;"	t	typeref:struct:s_stat
user	ft_ls.h	/^	char			*user;$/;"	m	struct:s_stat
user	ft_ls.h	/^	int				user;$/;"	m	struct:s_max
wordcount	libft/ft_strsplit.c	/^static int		wordcount(char const *s, char c)$/;"	f	file:
writeword	libft/ft_strsplit.c	/^static char		*writeword(char const *s, char c)$/;"	f	file:
